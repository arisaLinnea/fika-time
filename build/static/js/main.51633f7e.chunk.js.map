{"version":3,"sources":["cake.png","recipe.js","app.js","registerServiceWorker.js","index.js"],"names":["module","exports","recipe","ingredients","instructions","Recipe","number","map","line","index","key","className","cakes","name","link","image","App","window","onclick","event","target","document","getElementById","setShowModal","useState","showModal","recipeNumber","setRecipeNumber","id","onClick","src","clickOpen","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.51633f7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cake.505a442a.png\";","\r\nimport React, { useState } from \"react\";\r\n\r\n//{ingredients: [\"Not entered yet\"], instructions: \"none\" }\r\n\r\nconst recipe = [{\r\n    ingredients: [\r\n    \"3 dl flour\",\r\n    \"125g milk free margin\",\r\n    \"2 dl oatly iMat cream\",\r\n    \"1,5 dl cacao\",\r\n    \"50g chopped dark chocolate\",\r\n    \"2 msk light (sirap)\",\r\n    \"2 tsk vanilia suger\",\r\n    \"1 tsk baking powder\",\r\n    \"0,5 tsk salt\"],\r\n    instructions: \r\n    \"Instructions: 1.Sätt på ugnen på 175 1.    2.Smörj en form (ca 20cm i diameter) med margarin och bröa den med strödbröd.     3.Mät/väg upp alla torra ingredienser i en bunke.     4.Hacka chokladen och blanda detta med de torra ingredienserna     5.Smält margarinet och blanda med grädden och sirapen.    6.Häll över vätskan i bunken med de torra ingredienserna. Rör om till en smet.     7.Grädda mitt i ugnen på 175° i 15-18 minuter. Observera att detta endast är en riktlinje, hur pass länge den ska stå inne skiljer sig från en ugn till en annan. 8.Låt kakan svalna och toppa med färska bär och pudra över lite florsocker.\"\r\n}, {ingredients: [\"Not entered yet\"], instructions: \"none\" }];\r\n\r\nconst Recipe = ({number}) => {\r\n    if(number < 0) return <div></div>;\r\n    return (\r\n        <>\r\n        <ul>\r\n            {recipe[number].ingredients.map((line, index) => (\r\n                <li key={index}>\r\n                    {line}\r\n                </li>\r\n            ))}\r\n    </ul>\r\n    <p className=\"instructions\">\r\n        {recipe[number].instructions}\r\n    </p>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React, { useState } from \"react\";\r\nimport cakeImg from \"./cake.png\";\r\nimport Recipe from \"./recipe\";\r\n\r\nconst cakes = [\r\n  { name: \"Chocolate cake\", link: \"\", image: \"./cake.png\", number: 0 },\r\n  { name: \"?\", link: \"\", image: \"./cake.png\", number: 1 },\r\n  { name: \"Mudcake\", link: \"mudcake\", image: \"./cake.png\", number: 1 },\r\n  { name: \"???\", link: \"\", image: \"./cake.png\", number: 1 }\r\n];\r\n\r\nconst App = () => {\r\n\r\n  // When the user clicks anywhere outside of the modal, close it\r\nwindow.onclick = function(event) {\r\n    if (event.target == document.getElementById(\"myModal\")) {\r\n        setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [recipeNumber, setRecipeNumber] = useState(1);\r\n\r\n  const clickClose = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const clickOpen = number => {\r\n    setShowModal(true);\r\n    setRecipeNumber(number);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <h1>Fika inspiration</h1>\r\n        <ul>\r\n          <li>Home</li>\r\n          <li>About</li>\r\n        </ul>\r\n      </nav>\r\n      {showModal && (\r\n          <div id=\"myModal\" className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <span className=\"close\" onClick={() => clickClose()}>\r\n            &times;\r\n          </span>\r\n          <Recipe number={recipeNumber} />\r\n        </div>\r\n        </div>\r\n      )}\r\n      <div className=\"container\">\r\n        <p className=\"text\">\r\n          Some vegan and gluten free cakes, cookies and other pastries. Enjoy\r\n        </p>\r\n        {cakes.map(({ name, image, number }) => (\r\n          <div className=\"card\" key={name}>\r\n            <img className=\"card--avatar\" src={image} />\r\n            <h1 className=\"card--title\">{name}</h1>\r\n            <a className=\"card--link\" onClick={() => clickOpen(number)}>\r\n              Try\r\n            </a>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/serviceWorker.js`;\r\n  \r\n        if (!isLocalhost) {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        } else {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}